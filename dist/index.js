// Generated by CoffeeScript 1.6.3
(function() {
  var Builder, LiveSpritesheet, argv, fs, fsu, happens, path, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash-node');

  path = require('path');

  fsu = require('fs-util');

  fs = require('fs');

  Builder = require('node-spritesheet').Builder;

  argv = require('minimist')(process.argv.slice(2));

  happens = require('happens');

  module.exports = LiveSpritesheet = (function() {
    LiveSpritesheet.prototype.config = null;

    function LiveSpritesheet() {
      this._compile = __bind(this._compile, this);
      this.events = happens();
    }

    LiveSpritesheet.prototype.watch = function(config_path) {
      var cond_1, cond_2, cond_3, config_dir, css_original_path, on_change, watcher;
      config_path = path.join(process.cwd(), config_path);
      this.config = require(config_path);
      cond_1 = this.check_filename(this.config.output_css);
      cond_2 = this.check_filename(this.config.output_image);
      cond_3 = this.check_filename(this.config.output_image_retina);
      if (!cond_1 || !cond_2 || !cond_3) {
        this.error("output_css, output_image and output_image_retina need to be a filename and not a path.");
        return;
      }
      config_dir = path.dirname(config_path);
      this.config.src_image_folder = path.resolve(config_dir, this.config.src_image_folder);
      this.config.output_css_folder = path.resolve(config_dir, this.config.output_css_folder);
      this.config.output_image_folder = path.resolve(config_dir, this.config.output_image_folder);
      css_original_path = path.join(this.config.output_image_folder, this.config.output_css);
      on_change = _.debounce(this._compile, 1000, {
        leading: false,
        trailing: true
      });
      watcher = fsu.watch(this.config.src_image_folder, /.*/, true);
      watcher.on('watch', on_change);
      watcher.on('create', on_change);
      watcher.on('change', on_change);
      return watcher.on('delete', on_change);
    };

    LiveSpritesheet.prototype._compile = function() {
      var builder,
        _this = this;
      builder = new Builder({
        outputDirectory: this.config.output_image_folder,
        outputCss: this.config.output_css,
        selector: this.config.selector,
        images: this.get_files_from_dir(this.config.src_image_folder),
        log: false
      });
      builder.addConfiguration("legacy", {
        pixelRatio: 1,
        outputImage: this.config.output_image
      });
      builder.addConfiguration("retina", {
        pixelRatio: 2,
        outputImage: this.config.output_image_retina
      });
      return builder.build(function() {
        var css_new_path, css_original_path;
        css_original_path = _this.config.output_image_folder + "/" + _this.config.output_css;
        css_new_path = _this.config.output_css_folder + "/" + _this.config.output_css;
        _this.move_css(css_original_path, css_new_path);
        _this.events.emit('built', builder.files);
        return console.log("Build from " + builder.files.length + " images. Press CTRL+C to exit.");
      });
    };

    LiveSpritesheet.prototype.move_css = function(old_path, new_path) {
      var new_name, new_name_retina, prefix_url, reg_1, reg_2;
      prefix_url = path.relative(path.dirname(new_path), path.dirname(old_path)) + "/";
      reg_1 = new RegExp(this.config.output_image, "g");
      reg_2 = new RegExp(this.config.output_image_retina, "g");
      new_name = prefix_url + this.config.output_image;
      new_name_retina = prefix_url + this.config.output_image_retina;
      return fs.readFile(old_path, 'utf8', function(err, data) {
        var result;
        if (err) {
          this.error(err);
          return console.log(err);
        }
        result = data.replace(reg_1, new_name);
        result = result.replace(reg_2, new_name_retina);
        return fs.writeFile(old_path, result, 'utf8', function(err) {
          if (err) {
            this.error(err);
            return console.log(err);
          }
          return fs.renameSync(old_path, new_path);
        });
      });
    };

    LiveSpritesheet.prototype.get_files_from_dir = function(dir) {
      var files, item, output, _i, _len, _ref;
      if (!fs.existsSync(dir)) {
        this.error("Directory " + dir + " doesn't exist.");
        return [];
      }
      files = fs.readdirSync(dir);
      output = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        item = files[_i];
        if (item[0] !== '.' && ((_ref = path.extname(item)) === '.jpg' || _ref === '.png' || _ref === '.jpeg')) {
          output.push(path.join(dir, item));
        }
      }
      return output;
    };

    LiveSpritesheet.prototype.check_filename = function(test) {
      if (test.indexOf("/") !== -1) {
        console.error('ERROR: ' + test(+' needs to be a filename and not a path.'));
        return false;
      }
      return true;
    };

    LiveSpritesheet.prototype.error = function(message) {
      console.error(message);
      return this.events.emit("error", message);
    };

    return LiveSpritesheet;

  })();

}).call(this);
